CREATE SEQUENCE IF NOT EXISTS CATGENOME.S_TASK_ORGANISM START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS CATGENOME.S_TASK_EXCL_ORGANISM START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS CATGENOME.S_TASK_PARAMETER START WITH 1 INCREMENT BY 1;

CREATE TABLE IF NOT EXISTS CATGENOME.TASK (
    TASK_ID         BIGINT NOT NULL PRIMARY KEY,
    TITLE           VARCHAR(250),
    CREATED_DATE    TIMESTAMP NOT NULL,
    STATUS          INTEGER NOT NULL,
    END_DATE        TIMESTAMP,
    STATUS_REASON   VARCHAR(250),
    QUERY           VARCHAR(250),
    DATABASE        VARCHAR(250),
    EXECUTABLE      VARCHAR(250),
    ALGORITHM       VARCHAR(250),
    OPTIONS           VARCHAR(250),
    OWNER           VARCHAR(250)
);
CREATE TABLE IF NOT EXISTS CATGENOME.TASK_PARAMETER (
    PARAMETER_ID    BIGINT NOT NULL PRIMARY KEY,
    TASK_ID         BIGINT NOT NULL,
    PARAMETER       VARCHAR(250) NOT NULL,
    VALUE           VARCHAR(250) NOT NULL,
    CONSTRAINT parameter_task_id_fkey FOREIGN KEY (TASK_ID) REFERENCES CATGENOME.TASK(TASK_ID)
);
CREATE TABLE IF NOT EXISTS CATGENOME.TASK_ORGANISM (
    ORGANISM_ID     BIGINT NOT NULL PRIMARY KEY,
    TASK_ID         BIGINT NOT NULL,
    ORGANISM        BIGINT NOT NULL,
    CONSTRAINT organism_task_id_fkey FOREIGN KEY (TASK_ID) REFERENCES CATGENOME.TASK(TASK_ID)
);
CREATE TABLE IF NOT EXISTS CATGENOME.TASK_EXCL_ORGANISM (
    ORGANISM_ID     BIGINT NOT NULL PRIMARY KEY,
    TASK_ID         BIGINT NOT NULL,
    ORGANISM        BIGINT NOT NULL,
    CONSTRAINT excl_organism_task_id_fkey FOREIGN KEY (TASK_ID) REFERENCES CATGENOME.TASK(TASK_ID)
);
